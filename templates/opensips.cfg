#全局配置
debug=3
log_stderror=yes
log_facility=LOG_LOCAL0
fork=yes
children=4
listen=udp:0.0.0.0:5060

#模块配置
mpath="/lib/opensips/modules/"
loadmodule "db_mysql.so"
loadmodule "signaling.so"
loadmodule "sl.so"
loadmodule "tm.so"
loadmodule "rr.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "mi_fifo.so"
#loadmodule "uri_db.so"
loadmodule "uri.so"
#loadmodule "xlog.so"
loadmodule "acc.so"
loadmodule "auth.so"
loadmodule "auth_db.so"
loadmodule "domain.so"
loadmodule "sipmsgops.so"

#设置模块参数
modparam("mi_fifo","fifo_name", "/tmp/opensips_fifo")
#modparam("tm","noreply_avp_mode",1)
#modparam("rr", "enable_full_lr", 1)
modparam("usrloc", "db_mode", 2)
#modparam("uri_db", "use_uri_table", 0)
#modparam("uri_db", "db_url", "")

modparam("acc", "early_media", 1)
#modparam("acc", "report_ack", 1)
modparam("acc", "report_cancels", 1)

modparam("acc", "failed_transaction_flag", 3)
modparam("acc", "log_flag", 1)
modparam("acc", "log_missed_flag", 2)
modparam("acc", "db_flag", 1)

modparam("auth_db", "calculate_ha1", yes)
modparam("auth_db", "password_column", "password")
modparam("auth_db", "load_credentials", "")
modparam("domain", "db_mode", 1)

#多个模块参数。
#modparam("alias_db|auth_db|usrloc|uri_db", "use_domain", 1)


# FIXME: 修改下面参数用于设置指定的信息。
modparam("domain", "db_url","MYSQL_CONN_INFO")
modparam("auth_db", "db_url","MYSQL_CONN_INFO")
modparam("usrloc", "db_url", "MYSQL_CONN_INFO")

#下面的配置是OPENSIPS的默认配置，它为用户提供了注册，认证与增加面向媒体的服务。
#语音邮件（VOICEMAIL）
#    1. 留言-如果被呼叫的用户没有在OPENSIPS上面注册，然后会通过添加前缀VMR_后转发到ASTERISK服务。
#    2. 听取留言-如果一个用户拨打一个类似于*1111的电话，OPENSIPS将它发向ASTERISK。

#通知（ANNOUNCEMENTS）
#    1. 服务号码*2111作为获取当前时间消息的号码。
#    2. 服务号码*2112作为获取当前日期消息的号码。
#    3. 服务号码*2113作为访问回显服务的号码。

#会议（CONFERENCE）
#    1. 服务号码*3XXX作为拨进XXX会议室的号码。

#$var(asterisk_conn)="192.168.1.1:5060"

route{
    if (!mf_process_maxfwd_header("10")) {
        send_reply("483","Too Many Hops");
        exit;
    }

    if (has_totag()) {
        if (loose_route()) {
            if (is_method("BYE")) {
                setflag(1);
                setflag(3);
            } else if (is_method("INVITE")) {
                record_route();
            }
            route(1);
        } else {
            if ( is_method("ACK") ) {
                if ( t_check_trans() ) {
                    t_relay();
                    exit;
                } else {
                    exit;
                }
            }
            send_reply("404","Not here");
       }
       exit;
    }

    #取消当前过程。
    if (is_method("CANCEL")) {
        if (t_check_trans())
            t_relay();
        exit;
    }

    t_check_trans();
    #如果一个来自于本地的用户，则对其认证。
    if (!(method=="REGISTER") && is_from_local()) { 
        #如果一个请求即不是为REGISTER类型也不是来自于本地。则通过代理方式认证。
        if (!proxy_authorize("", "subscriber")) {
            proxy_challenge("", "0");
            exit;
        }

        if (!db_check_from()) {
            send_reply("403","Forbidden auth ID");
            exit;
        }
        consume_credentials();
    }

    #进行路由检测。
    if (loose_route()) {
        xlog("L_ERR","Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
        if (!is_method("ACK"))
            send_reply("403","Preload Route denied");
        exit;
    }

    #记录路由。
    if (!is_method("REGISTER|MESSAGE"))
        record_route();

    #如果为INVITE类型，则进行记账处理。
    if (is_method("INVITE")) {
        setflag(1); # do accounting
    }
    
    # 如果目标不是一个本地的域名，则拨向目标指示的域名服务。
    if (!is_uri_host_local()) {
        append_hf("P-hint: outbound\r\n");
        route(1);
    }


    #REGISTER指令处理。
    if (is_method("REGISTER")) {
        #认证REGISTER请求。
        if (!www_authorize("", "subscriber")) {
            www_challenge("", "0");
            exit;
        }

        if (!db_check_to()) {
            send_reply("403","Forbidden auth ID");
            exit;
        }

        if (!save("location"))
            sl_reply_error();
        exit;
    }

    #检测RURI中的用户。
    if ($rU==NULL) {
        send_reply("484","Address Incomplete");
        exit;
    }

    # ASTERISK HOOK - BEGIN
    # ASTERISK中间处理。
    # 媒体服务号码匹配过程。
    if ($rU=~"REG_SIP_NUMBER") {
        #紧紧来自于本地域名服务的用户可访问ASTERISK服务。
        if (!is_from_local()) {
            send_reply("403","Forbidden access to media service");
            exit;
        }

        if ($rU=~"REG_VOICEMAIL_NUMBER") {
            #访问语音邮件。
            #seturi("sip:VM_pickup@"+$var(asterisk_conn));
            seturi("sip:VM_pickup@ASTERISK_HOST_INFO");
        } else if ($rU=~"REG_TIME_NUMBER") {
            #访问时间服务。
            #seturi("sip:AN_time@"+$var(asterisk_conn));
            seturi("sip:AN_time@ASTERISK_HOST_INFO");
        } else if ($rU=~"REG_DATE_NUMBER") {
            #访问日期服务。
            seturi("sip:AN_date@ASTERISK_HOST_INFO");
            #seturi("sip:AN_date@"+$var(asterisk_conn));
        } else if ($rU=~"REG_ECHO_NUMBER") {
            #访问回显服务。
            seturi("sip:AN_echo@ASTERISK_HOST_INFO");
            #seturi("sip:AN_echo@"+$var(asterisk_conn));
        } else if ($rU=~"REG_CONF_NUMBER") {
            #访问会议室。
            strip(2);
            prefix("CR_");
            #rewritehostport($var(asterisk_conn));
            rewritehostport("ASTERISK_HOST_INFO");
        } else {
            seturi("sip:AN_notavailable@ASTERISK_HOST_INFO");
            #seturi("sip:AN_notavailable@"+$var(asterisk_conn));
        }

        t_relay();
        exit;
    }
    # ASTERISK HOOK - END
    # do lookup
    if (!lookup("location")) {
        # ASTERISK HOOK - BEGIN
        # callee is not registered, so different to Voicemail
        # First add the VM recording prefix to the RURI
        prefix("VMR_");
        # forward to the call to Asterisk (replace below with real IP and port)
        #rewritehostport($var(asterisk_conn));
        rewritehostport("ASTERISK_HOST_INFO");
        route(1);
        # ASTERISK HOOK - END
        exit;
    }
    # when routing via usrloc, log the missed calls also
    setflag(2);
    # arm a failure route in order to catch failed calls
    # targeting local subscribers; if we fail to deliver
    # the call to the user, we send the call to voicemail
    t_on_failure("1");
    route(1);
}


route[1] {
    if (!t_relay()) {
        sl_reply_error();
    };
    exit;
}

failure_route[1] {
    if (t_was_cancelled()) {
        exit;
    }
    # if the failure code is "408 - timeout" or "486 - busy",
    # forward the calls to voicemail recording
    if (t_check_status("486|408")) {
        # ASTERISK HOOK - BEGIN
        # First revert the RURI to get the original user in RURI
        # Then add the VM recording prefix to the RURI
        revert_uri();
        prefix("VMR_");
        # forward to the call to Asterisk (replace below with real IP and port)
        #rewritehostport($var(asterisk_conn));
        rewritehostport("ASTERISK_HOST_INFO");
        t_relay();
        # ASTERISK HOOK - END
        exit;
    }
}

